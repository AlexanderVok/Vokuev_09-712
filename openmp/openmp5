#include <algorithm> 
#include <stdlib.h> 
#include <time.h> 
#include "pch.h" 
#include <iostream> 
#include <omp.h> 
#include <stdio.h> 
using namespace std; 
int main() { 
 
 int d[6][8]; 
 for (int i = 0; i < 6; i++) { 
 for (int j = 0; j < 8; j++) { 
 d[i][j] = rand() % 10; 
 printf("%d ", d[i][j]); 
 } 
 printf("\n"); 
 } 
 printf("\n"); 
 
 
#pragma omp parallel sections num_threads(3) 
 { 
#pragma omp section 
 { 
 double sum = 0; 
 for (int i = 0; i < 6; i++) { 
 for (int j = 0; j < 8; j++) { 
 sum += d[i][j]; 
 } 
 } 
 sum = (double)sum / 48.0; 
 printf("mid is %f, from thread %d\n", sum, omp_get_thread_num()); 
 } 
 
#pragma omp section 
 { 
 int max = 0, min = 0; 
 for (int i = 0; i < 6; i++) { 
 for (int j = 0; j < 8; j++) { 
 if (min > d[i][j]) { 
 min = d[i][j]; 
 } 
 if (max < d[i][j]) { 
 max = d[i][j]; 
 } 
 } 
 } 
 printf("min is %d and max is %d from thread %d\n", min, max, omp_get_thread_num()); 
 } 
 
#pragma omp section 
 { 
 int number = 0; 
 for (int i = 0; i < 6; i++) { 
 for (int j = 0; j < 8; j++) { 
 if (d[i][j] % 3 == 0) { 
 number++; 
 } 
 } 
 } 
 printf("number of digits divisible by 3 = %d from %d thread\n", number, omp_get_thread_num()); 
 } 
 } 
 
} 
