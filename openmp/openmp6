
#include "pch.h"
#include<omp.h>
#include<iostream>
using namespace std;


int main()
{
	omp_set_num_threads(3);
	int a[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int b[10] = { 6,7,11,4,14,5,7,7,8,9 };
	int i;
	int sumA = 0, sumB = 0;
#pragma omp parallel shared(a,b) private(i) reduction(+:sumA,sumB)
	{
#pragma omp for // Для распределения итераций цикла между различными нитями можно использовать директиву for.
		for (i = 0; i < 10; i++) {
			sumA += a[i];
			sumB += b[i];
		}
	}
	printf("Average sum of a = %f \n", (double)sumA / 10.0);
	printf("Average sum of b = %f \n", (double)sumB / 10.0);

	system("pause");
	return 0;
}

//reduction(оператор:список) – задаёт оператор и список общих пе -
//ременных; для каждой переменной создаются локальные копии в каж -
//дой нити; локальные копии инициализируются соответственно типу
//
//оператора(для аддитивных операций – 0 или его аналоги, для мульти -
//	пликативных операций – 1 или её аналоги); над локальными копиями
//
//	переменных после выполнения всех операторов параллельной области
//	выполняется заданный оператор;
